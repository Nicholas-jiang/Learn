github 学习笔记
	github用于托管项目代码
1.基本概念 （关键字）
	仓库（repository）
		存放项目代码，不同项目代码存在不同仓库
	收藏（Star）
		收藏项目的人数
	复制和克隆（fork）
		检出项目代码
	发起请求（pull request)
		发起提交代码的请求
	关注（watch）
		关注的人状态更新可以收到提醒
	事务卡片（issue）
		
	github主页
		注册成功后的页面
	仓库主页
		项目信息页面
	个人主页
		个人资料

2.注册github账号
	官网 Github.com
	验证邮箱
	
3.创建仓库
	一个git仓库对应一个开源项目
4.创建文件
	creat new file 创建文件。创建成功后自动跳转到仓库主页
	编辑文件 
	删除文件
	上传文件
5.检出项目
	clone or download
6.发起请求（pull request）
	fork x项目
	修改本地项目代码
	creat pull request 
	等待原仓库开发者审核合并
	
	
7.git安装和使用
	通过git管理github托管项目
	下载地址： https://git-scm.com/download/win
	
8.git工作区域
	1.工作区域  新建修改代码
	
	2.git仓库  文件保存区
	
	3.暂存区  多次修改可以暂存区储存 最后统一提交git仓库

9.提交文件流程
	1.git status 
	2.git add
	3.git commit -m "xxx"
	
	{
		实际开发的流程
		git add .

		git commit -m "注释语句"

		git remote add origin https://自己的仓库url地址

		git pull origin master

		git push -u origin master
	}
	
10.git初始化 
	git config --global user.name 'name'
	git config --global user.name 'email'
	git init
11.修改仓库文件
	git rm 删除

12.github搭建网站
	https://用户名.github.io
	a.创建个人站点（新建仓库 名称必须是【用户名.github.io】）
	b.在仓库下面创建一个index.html
13.项目站点
	https://用户名.github.io/仓库名
	a.进入主页面，点击setting
	b.点击
	
	
14.git常用命令

	git add .

	git commit -m "注释语句"

	git remote add origin https://自己的仓库url地址

	git pull origin master

	git push -u origin master

	git branch 查看本地所有分支
	git status 查看当前状态
	git commit 提交
	git branch -a 查看所有的分支
	git branch -r 查看远程所有分支
	git commit -am "init" 提交并且加注释
	git remote add origin git@192.168.1.119:ndshowgit
	push origin master 将文件给推到服务器上
	git remote show origin 显示远程库origin里的资源
	git push origin master:develop
	git push origin master:hb-dev 将本地库与服务器上的库进行关联
	git checkout --track origin/dev 切换到远程dev分支
	git branch -D master develop 删除本地库develop
	git checkout -b dev 建立一个新的本地分支dev
	git merge origin/dev 将分支dev与当前分支进行合并
	git checkout dev 切换到本地dev分支
	git remote show 查看远程库
	git add .git rm 文件名(包括路径) 从git中删除指定文件* git clone git://github.com/schacon/grit.git 从服务器上将代码给拉下来
	git config --list 看所有用户
	git ls-files 看已经被提交的
	git rm [file name] 删除一个文件
	git commit -a 提交当前repos的所有的改变
	git add [file name] 添加一个文件到
	git indexgit commit -v 当你用－v参数的时候可以看commit的差异
	git commit -m "This is the message describing the commit" 添加commit信息
	git commit -a -a是代表add，把所有的change加到git index里然后再commit
	git commit -a -v 一般提交命令
	git log 看你commit的日志
	git diff 查看尚未暂存的更新
	git rm a.a 移除文件(从暂存区和工作区中删除)
	git rm --cached a.a 移除文件(只从暂存区中删除)
	git commit -m "remove" 移除文件(从Git中删除)
	git rm -f a.a 强行移除修改后文件(从暂存区和工作区中删除)
	git diff --cached 或 $ git diff --staged 查看尚未提交的更新
	git stash push 将文件给push到一个临时空间中
	git stash pop 将文件从临时空间pop下来
	git remote add origin git@github.com:username/Hello-World.git

	git push origin master 将本地项目给提交到服务器中

	git pull 本地与服务器端同步

	git push (远程仓库名) (分支名) 将本地分支推送到服务器上去。

	git push origin serverfix:awesomebranch

	git fetch 相当于是从远程获取最新版本到本地，不会自动merge

	git commit -a -m "log_message" (-a是提交所有改动，-m是加入log信息) 本地修改同步至服务器端 ：

	git branch branch_0.1 master 从主分支master创建branch_0.1分支

	git branch -m branch_0.1 branch_1.0 将branch_0.1重命名为branch_1.0

	git checkout branch_1.0/master 切换到branch_1.0/master分支du -hs

	git branch 删除远程branchgit push origin :branch_remote_namegit branch -r -d branch_remote_name

	
	
15.删除远程仓库
	拉取远程的Repo到本地（如果已经在本地，可以略过） 
	$ git clone xxxxxx
	在本地仓库删除文件 
	$ git rm 我的文件
	在本地仓库删除文件夹 
	$ git rm -r 我的文件夹/
	此处-r表示递归所有子目录，如果你要删除的，是空的文件夹，此处可以不用带上-r。
	提交代码 
	$ git commit -m"我的修改"
	推送到远程仓库（比如GitHub） 
	$ git push origin xxxxxx
	 